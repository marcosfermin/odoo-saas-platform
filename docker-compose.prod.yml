# =============================================================================
# Odoo SaaS Platform - Production Environment
# =============================================================================
# This docker-compose file is optimized for production deployment
# with enhanced security, performance, and reliability features

version: '3.8'

services:
  # PostgreSQL Database with production optimizations
  postgres:
    image: postgres:15-alpine
    container_name: odoo-saas-postgres-prod
    environment:
      POSTGRES_DB: ${PG_DATABASE}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=en_US.UTF-8"
      # Performance tuning
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_MAINTENANCE_WORK_MEM: 64MB
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: 0.9
      POSTGRES_WAL_BUFFERS: 16MB
      POSTGRES_DEFAULT_STATISTICS_TARGET: 100
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./config/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    ports:
      - "127.0.0.1:5432:5432"  # Bind to localhost only
    networks:
      - odoo-saas-internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Redis with persistence and production config
  redis:
    image: redis:7-alpine
    container_name: odoo-saas-redis-prod
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only
    networks:
      - odoo-saas-internal
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Admin Dashboard Service - Production
  admin:
    build:
      context: .
      dockerfile: admin/Dockerfile
      target: production
    container_name: odoo-saas-admin-prod
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=false
      - PG_HOST=postgres
      - PG_PORT=5432
      - PG_USER=${PG_USER}
      - PG_PASSWORD=${PG_PASSWORD}
      - PG_DATABASE=${PG_DATABASE}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_ACCESS_TOKEN_EXPIRES=${JWT_ACCESS_TOKEN_EXPIRES:-3600}
      - JWT_REFRESH_TOKEN_EXPIRES=${JWT_REFRESH_TOKEN_EXPIRES:-604800}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - GUNICORN_WORKERS=${GUNICORN_WORKERS:-4}
      - GUNICORN_WORKER_CLASS=${GUNICORN_WORKER_CLASS:-gevent}
      - GUNICORN_WORKER_CONNECTIONS=${GUNICORN_WORKER_CONNECTIONS:-1000}
    volumes:
      - ./logs/admin:/app/logs
    ports:
      - "127.0.0.1:5000:5000"  # Bind to localhost only
    networks:
      - odoo-saas-internal
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      replicas: 2

  # Customer Portal Service - Production
  portal:
    build:
      context: .
      dockerfile: portal/Dockerfile
      target: production
    container_name: odoo-saas-portal-prod
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=false
      - PG_HOST=postgres
      - PG_PORT=5432
      - PG_USER=${PG_USER}
      - PG_PASSWORD=${PG_PASSWORD}
      - PG_DATABASE=${PG_DATABASE}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_SIGNING_SECRET=${STRIPE_SIGNING_SECRET}
      - PADDLE_PUBLIC_KEY_BASE64=${PADDLE_PUBLIC_KEY_BASE64}
      - PADDLE_SIGNING_SECRET=${PADDLE_SIGNING_SECRET}
      - GUNICORN_WORKERS=${GUNICORN_WORKERS:-4}
      - GUNICORN_WORKER_CLASS=${GUNICORN_WORKER_CLASS:-gevent}
    volumes:
      - ./logs/portal:/app/logs
    ports:
      - "127.0.0.1:5001:5000"  # Bind to localhost only
    networks:
      - odoo-saas-internal
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      replicas: 2

  # RQ Workers for background jobs - Production
  worker:
    build:
      context: .
      dockerfile: worker/Dockerfile
      target: production
    environment:
      - FLASK_ENV=production
      - PG_HOST=postgres
      - PG_PORT=5432
      - PG_USER=${PG_USER}
      - PG_PASSWORD=${PG_PASSWORD}
      - PG_DATABASE=${PG_DATABASE}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - RQ_WORKERS=${RQ_WORKERS:-4}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${S3_BUCKET}
      - S3_KMS_KEY_ID=${S3_KMS_KEY_ID}
    volumes:
      - ./logs/worker:/app/logs
      - worker_tmp:/tmp
    networks:
      - odoo-saas-internal
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
      replicas: 2

  # Nginx reverse proxy with TLS termination
  nginx:
    build:
      context: ./config/nginx
      dockerfile: Dockerfile.prod
    container_name: odoo-saas-nginx-prod
    environment:
      - DOMAIN=${DOMAIN}
      - ADMIN_DOMAIN=${ADMIN_DOMAIN}
      - PORTAL_DOMAIN=${PORTAL_DOMAIN}
    volumes:
      - ./config/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - letsencrypt_certs:/etc/letsencrypt:ro
      - letsencrypt_challenge:/var/www/letsencrypt
    ports:
      - "80:80"
      - "443:443"
    networks:
      - odoo-saas-internal
      - odoo-saas-public
    depends_on:
      - admin
      - portal
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Let's Encrypt certificate management
  letsencrypt:
    image: certbot/certbot:latest
    container_name: odoo-saas-letsencrypt
    volumes:
      - letsencrypt_certs:/etc/letsencrypt
      - letsencrypt_challenge:/var/www/letsencrypt
    environment:
      - DOMAIN=${DOMAIN}
      - ADMIN_DOMAIN=${ADMIN_DOMAIN}
      - PORTAL_DOMAIN=${PORTAL_DOMAIN}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
    command: >
      sh -c "
        trap exit TERM;
        while :; do
          certbot renew --webroot --webroot-path=/var/www/letsencrypt --quiet;
          sleep 12h & wait $${!};
        done
      "
    restart: unless-stopped
    profiles: ["ssl"]

  # Prometheus for production monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: odoo-saas-prometheus-prod
    user: "65534:65534"  # nobody user
    volumes:
      - ./config/prometheus/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    ports:
      - "127.0.0.1:9090:9090"  # Bind to localhost only
    networks:
      - odoo-saas-internal
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Grafana with production settings
  grafana:
    image: grafana/grafana:latest
    container_name: odoo-saas-grafana-prod
    user: "472:472"  # grafana user
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_INSTALL_PLUGINS=
      - GF_LOG_LEVEL=warn
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "127.0.0.1:3001:3000"  # Bind to localhost only, different port
    networks:
      - odoo-saas-internal
    depends_on:
      - prometheus
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Log aggregation with Fluentd (optional)
  fluentd:
    build: ./config/fluentd
    container_name: odoo-saas-fluentd
    volumes:
      - ./config/fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - ./logs:/var/log/containers:ro
    ports:
      - "127.0.0.1:24224:24224"
      - "127.0.0.1:24224:24224/udp"
    networks:
      - odoo-saas-internal
    restart: unless-stopped
    profiles: ["logging"]

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local
  letsencrypt_certs:
    driver: local
  letsencrypt_challenge:
    driver: local
  worker_tmp:
    driver: local

networks:
  # Internal network for service communication
  odoo-saas-internal:
    driver: bridge
    name: odoo-saas-internal
    internal: true
    
  # Public network for external access
  odoo-saas-public:
    driver: bridge
    name: odoo-saas-public